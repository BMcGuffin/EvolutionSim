/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package evosimApp;

import evosimSources.Carnivore;
import evosimSources.Herbivore;
import evosimSources.Creature;
import evosimSources.Map;
import evosimSources.Plant;
import evosimInterfaces.Organism;
import java.awt.Font;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JFrame;

/**
 * Represents a simple text GUI that displays the map visually. Organisms are
 * represented with characters. The board is represented as an ASCII grid.
 *
 * @author bryanmcguffin
 * @version 5-15-17
 */
public class MapDisplay extends javax.swing.JFrame implements Observer
{

    private Map m;

    /**
     * Creates a new GUI that observes the map object.
     *
     * @param map the map structure that holds the positions of organisms
     */
    public MapDisplay(Map map)
    {
        m = map;
        m.addObserver(this);
        initComponents();
        mapField.setFont(new Font("monospaced", Font.PLAIN, 12));
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        update(m, 0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = new javax.swing.JScrollPane();
        mapField = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mapField.setEditable(false);
        mapField.setColumns(20);
        mapField.setRows(5);
        jScrollPane1.setViewportView(mapField);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea mapField;
    // End of variables declaration//GEN-END:variables

    /**
     * Redraw the map based on the map size. Put characters representing the
     * organisms into the slots where those organisms would be located.
     *
     * @param o the observable object to watch
     * @param arg some argument that here is unused
     */
    @Override
    public void update(Observable o, Object arg)
    {
        String mapBox = " ";
        for (int i = 0; i < EvoConstants.MAP_SIZE; i++)
        {
            for (int j = 0; j < EvoConstants.MAP_SIZE; j++)
            {
                mapBox += "----";
            }
            mapBox += "-\n ";
            for (int j = 0; j < EvoConstants.MAP_SIZE; j++)
            {
                mapBox += "| " + toString(i, j) + " ";
            }
            mapBox += "|\n ";
        }
        for (int j = 0; j < EvoConstants.MAP_SIZE; j++)
        {
            mapBox += "----";
        }
        mapBox += "-";
        mapField.setText(mapBox);
    }

    /**
     * Get the character which represents the organism contained at the given
     * location on the grid.
     *
     * @param x the x-coordinate to check
     * @param y the y-coordinate to check
     * @return a character which represents the organism at the given grid
     * position, or a blank space if that grid space is empty
     */
    public String toString(int x, int y)
    {
        String str = "";
        Object o = m.grid[x][y];
        if (null == o)
        {
            str = " ";
        }
        else if (o instanceof Organism)
        {

            if (o instanceof Creature)
            {
                if (o instanceof Carnivore)
                {
                    str = "C";
                }
                else if (o instanceof Herbivore)
                {
                    str = "H";
                }
            }
            else if (o instanceof Plant)
            {
                str = "P";
            }

        }
        else
        {
            str = "X";
        }
        return str;
    }
}
